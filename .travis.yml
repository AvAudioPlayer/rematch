language: python

matrix:
  include:
    - python: "2.7"
      env: PROJECT=idaplugin ENV=conda
    - python: "2.7"
      env: PROJECT=server DJANGO_SETTINGS_MODULE='rematch.settings.debug' ENV=conda
      services:
        - mysql
        - rabbitmq
    - python: "3.5"
      env: PROJECT=server DJANGO_SETTINGS_MODULE='rematch.settings.production' ENV=conda
      services:
        - mysql
        - rabbitmq
    - python: "2.7"
      env: PROJECT=server DJANGO_SETTINGS_MODULE='rematch.settings.docker' ENV=docker
      services: docker
    - python: "2.7"
      env: PROJECT=setup.py

branches:
  only:
    - master

# Handle git submodules ourselves to replace ssh login with https login
git:
    submodules: false
# Use sed to replace the SSH URL with the public URL, then initialize submodules
before_install:
    - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
    - git submodule update --init --recursive

install:
  - set +vx;
  - if [ ${ENV} = "conda" ]; then
      if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      fi;
      bash ./miniconda.sh -b -p ${HOME}/miniconda;
      export PATH=${HOME}/miniconda/bin:$PATH;
      conda info -a;
      conda update --yes conda;

      if [ ${PROJECT} = "server" ]; then
        conda install --yes python=${TRAVIS_PYTHON_VERSION} atlas numpy scipy scikit-learn;
      fi;
      if [ ${PROJECT} = "idaplugin" ]; then
        conda install --yes python=${TRAVIS_PYTHON_VERSION} pyqt;
      fi;
      if [ -f tests/${PROJECT}/requirements.txt ]; then
        pip install -r tests/${PROJECT}/requirements.txt ;
        pip install pytest-cov coveralls ;
      fi;
      if [ -f ${PROJECT}/requirements.txt ]; then pip install -r ${PROJECT}/requirements.txt ; fi ;
    fi;
  - if [ ${ENV} = "docker" ]; then
      service docker start ;
      docker-compose -f ./${PROJECT}/docker-compose.yml build ;
      docker-compose -f ./${PROJECT}/docker-compose.yml up -d ;
      if [ -f ./tests/${PROJECT}/requirements.txt ]; then
        docker-compose -f ./${PROJECT}/docker-compose.yml exec web pip install -r ./tests/requirements.txt ;
      fi ;
    fi;
  - pip install flake8 pytest-cov coveralls

before_script:
  - if [ ${PROJECT} = "server" ]; then mysql -e 'SHOW VARIABLES LIKE "%version%";' ; fi ;

script:
  - flake8 ./${PROJECT} --show-source --statistics
  - if [ -d ./tests/${PROJECT} ]; then
      flake8 ./tests/${PROJECT} --show-source ;
      if [ ${ENV} = "conda" ]; then PYTHONPATH=. py.test ./${PROJECT} ./tests/${PROJECT} --verbose --cov-report= --cov=$PROJECT ; fi ;
      if [ ${ENV} = "docker" ]; then docker-compose -f ./${PROJECT}/docker-compose.yml exec web py.test ./ --verbose --cov-report= --cov=$PROJECT ; fi ;
    fi;

after_script:
  - if [ -d ./tests/${PROJECT} ]; then
      if [ ${ENV} = "docker" ]; then
        cd ${PROJECT}
        docker cp web_1:.coverage .coverage ;
      fi ;
      coveralls ;
    fi;
